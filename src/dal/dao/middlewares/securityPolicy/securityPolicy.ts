import { filter } from 'lodash'
import { AnyProjection, GenericProjection, Projection, StaticProjection } from '../../projections/projections.types'
import { isProjectionIntersected, mergeProjections } from '../../projections/projections.utils'
import { DAOMiddleware } from '../middlewares.types'

export function securityPolicy<
  SecurityContext,
  ModelType,
  P1 extends StaticProjection<ModelType>,
  P2 extends AnyProjection<ModelType, ProjectionType>,
  IDKey extends keyof Omit<ModelType, ExcludedFields>,
  IDAutogenerated extends boolean,
  FilterType,
  ProjectionType extends Projection<ModelType>,
  UpdateType,
  ExcludedFields extends keyof ModelType,
  SortType,
  OptionsType extends { securityContext: SecurityContext },
  ScalarsType,
  >(args: {
    secureFilter?: (conditions?: FilterType, securityContext?: SecurityContext) => FilterType | undefined,
    secureProjection?: (conditions?: FilterType, projections?: ProjectionType, securityContext?: SecurityContext) => ProjectionType | undefined,
    secureRecords?: (records: ModelType[], conditions?: FilterType, projections?: ProjectionType, securityContext?: SecurityContext) => ModelType[],
  }): DAOMiddleware<ModelType, IDKey, IDAutogenerated, FilterType, ProjectionType, UpdateType, ExcludedFields, SortType, OptionsType, ScalarsType> {
  return {
    beforeFind: async (params) => {
      return {
        filter: args.secureFilter ? args.secureFilter(params.filter, params.options?.securityContext) : params.filter,
        projection: args.secureProjection ? args.secureProjection(params.filter, params.projection, params.options?.securityContext) : params.projection,
        ...params
      }
    }


    //   afterFind ?: (
    //     params: FindParams<FilterType, ProjectionType, SortType, OptionsType>,
    //     result: PartialDeep<ModelType>,
    //     context: MiddlewareContext<ScalarsType, IDKey>,
    // ) => Promise < PartialDeep < ModelType >>
    //   beforeInsert ?: (
    //     params: InsertParams<ModelType, IDKey, ExcludedFields, IDAutogenerated, OptionsType>,
    //     context: MiddlewareContext<ScalarsType, IDKey>,
    //   ) => Promise < InsertParams < ModelType, IDKey, ExcludedFields, IDAutogenerated, OptionsType >>
    //     afterInsert ?: (
    //       params: InsertParams<ModelType, IDKey, ExcludedFields, IDAutogenerated, OptionsType>,
    //       result: Omit<ModelType, ExcludedFields>,
    //       context: MiddlewareContext<ScalarsType, IDKey>,
    //   ) => Promise < Omit < ModelType, ExcludedFields >>
    //     beforeUpdate ?: (params: UpdateParams<FilterType, UpdateType, OptionsType>, context: MiddlewareContext<ScalarsType, IDKey>) => Promise < UpdateParams < FilterType, UpdateType, OptionsType >>
    //       afterUpdate ?: (params: UpdateParams<FilterType, UpdateType, OptionsType>, context: MiddlewareContext<ScalarsType, IDKey>) => Promise < void>
    //         beforeReplace ?: (
    //           params: ReplaceParams<FilterType, ModelType, ExcludedFields, OptionsType>,
    //           context: MiddlewareContext<ScalarsType, IDKey>,
    //       ) => Promise < ReplaceParams < FilterType, ModelType, ExcludedFields, OptionsType >>
    //         afterReplace ?: (params: ReplaceParams<FilterType, ModelType, ExcludedFields, OptionsType>, context: MiddlewareContext<ScalarsType, IDKey>) => Promise < void>
    //           beforeDelete ?: (params: DeleteParams<FilterType, OptionsType>, context: MiddlewareContext<ScalarsType, IDKey>) => Promise < DeleteParams < FilterType, OptionsType >>
    //             afterDelete ?: (params: DeleteParams<FilterType, OptionsType>, context: MiddlewareContext<ScalarsType, IDKey>) => Promise<void>
  }
}
