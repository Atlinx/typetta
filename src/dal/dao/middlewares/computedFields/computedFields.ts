import { AnyProjection, GenericProjection, ModelProjection, Projection, StaticProjection } from '../../projections/projections.types'
import { isProjectionIntersected } from '../../projections/projections.utils'
import { DAOMiddleware } from '../middlewares.types'
import { projectionDependency } from '../projectionDependecy.middleware'
import { deepMerge } from '@twinlogix/tl-commons'
import { PartialDeep } from 'type-fest'

export function buildComputedField<
  ModelType,
  P1 extends StaticProjection<ModelType>,
  P2 extends AnyProjection<ModelType, ProjectionType>,
  IDKey extends keyof Omit<ModelType, ExcludedFields>,
  IDAutogenerated extends boolean,
  FilterType,
  ProjectionType extends Projection<ModelType>,
  UpdateType,
  ExcludedFields extends keyof ModelType,
  SortType,
  OptionsType,
  ScalarsType,
>(args: {
  fieldsProjection: P2
  requiredProjection: P1
  compute: (record: ModelProjection<ModelType, P1>) => Promise<PartialDeep<ModelType>>
}): DAOMiddleware<ModelType, IDKey, IDAutogenerated, FilterType, ProjectionType, UpdateType, ExcludedFields, SortType, OptionsType, ScalarsType> {
  return {
    beforeFind: projectionDependency<ModelType, P1, P2, IDKey, IDAutogenerated, FilterType, ProjectionType, UpdateType, ExcludedFields, SortType, OptionsType, ScalarsType>(args).beforeFind,
    afterFind: async (findParams, result) => {
      if (result && isProjectionIntersected(findParams.projection ? (findParams.projection as GenericProjection) : true, args.fieldsProjection ? (args.fieldsProjection as GenericProjection) : true)) {
        return deepMerge(result, await args.compute(result as ModelProjection<ModelType, P1>))
      }
      return result
    },
  }
}
