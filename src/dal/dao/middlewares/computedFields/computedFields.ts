import { deepMerge } from '@twinlogix/tl-commons'
import { PartialDeep } from 'type-fest'
import { GenericProjection, ModelProjection, Projection, StaticProjection } from '../../projections/projections.types'
import { isProjectionIntersected, projectionDependency } from '../../projections/projections.utils'
import { DAOMiddleware } from '../middlewares.types'

export function buildComputedField<
  ModelType,
  P extends StaticProjection<ModelType>,
  IDKey extends keyof Omit<ModelType, ExcludedFields>,
  IDAutogenerated extends boolean,
  FilterType,
  UpdateType,
  ExcludedFields extends keyof ModelType,
  SortType,
  OptionsType,
  >(args: {
    fieldsProjection: Projection<ModelType>
    requiredProjection: P
    compute: (record: ModelProjection<ModelType, P>) => Promise<PartialDeep<ModelType>>
  }): DAOMiddleware<ModelType, IDKey, IDAutogenerated, FilterType, UpdateType, ExcludedFields, SortType, OptionsType> {
  return {
    beforeFind: projectionDependency<ModelType, P, IDKey, IDAutogenerated, FilterType, UpdateType, ExcludedFields, SortType, OptionsType>(args).beforeFind,
    afterFind: async (findParams, result) => {
      if (result && isProjectionIntersected(findParams.projection ? (findParams.projection as GenericProjection) : true, args.fieldsProjection ? (args.fieldsProjection as GenericProjection) : true)) {
        return deepMerge(result, await args.compute(result as ModelProjection<ModelType, P>))
      }
      return result
    },
  }
}
