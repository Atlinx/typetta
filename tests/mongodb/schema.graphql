scalar Coordinates @geopoint
scalar LocalizedString
scalar Decimal
scalar Password
scalar JSON
scalar Live

type Device @entity @mongodb {
  id: ID! @id
  name: String!
  userId: ID
  user: User @innerRef
}

type UsernamePasswordCredentials {
  username: String! @alias(value: "user")
  password: Password! @alias(value: "pwd")
}

type City @entity @mongodb {
  id: ID! @id
  name: String!
  addressId: ID!
  computedName: String @exclude
  computedAddressName: String @exclude
}

type Address @entity @mongodb(collection: "addresses") {
  id: ID! @id
  cities: [City!] @foreignRef
}

type Organization @entity @mongodb {
  id: ID! @id
  name: String!
  vatNumber: String
  address: Address
  computedName: String @exclude
}

type User @entity @mongodb {
  id: ID! @id @alias(value: "ID")
  usernamePasswordCredentials: UsernamePasswordCredentials @alias(value: "cred")
  firstName: String @alias(value: "name")
  lastName: String
  live: Boolean!
  localization: Coordinates
  title: LocalizedString
  amounts: [Decimal!] @alias(value: "amounts")
  amount: Decimal
  friendsId: [ID!] @alias(value: "fIds")
  friends: [User!] @innerRef
  dogs: [Dog!] @foreignRef(refFrom: "ownerId")
}

type Dog @entity @mongodb {
  id: ID! @id
  name: String!
  ownerId: ID!
  owner: User @innerRef
}

type Post @entity @mongodb {
  id: ID! @id
  title: String!
  body: String
  views: Int!
  clicks: Int
  authorId: ID! @alias(value: "aId")
  author: User! @innerRef
  metadata: PostMetadata
}

type PostMetadata {
  region: String!
  visible: Boolean!
}

type MockedEntity @entity {
  id: ID! @id(from: "db") @alias(value: "_id")
  name: String!
  userId: ID!
  user: User! @innerRef
}

type DefaultFieldsEntity @entity @mongodb {
  id: ID! @id(from: "user")
  name: String!
  live: Live! @default(from: "generator")
  creationDate: Int! @default

  opt1: Live @default(from: "middleware")
  opt2: Live @default(from: "generator")
}
