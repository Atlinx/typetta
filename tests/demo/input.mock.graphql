enum SortDirection {
  ASC
  DESC
}

enum StringFilterMode {
  SENSITIVE
  INSENSITIVE
}

input StringFilterInput {
  eq: String
  ne: String
  in: [String!]
  nin: [String!]
  exists: Boolean
  contains: String
  startsWith: String
  endsWith: String
  mode: StringFilterMode
}

input IntFilterInput {
  eq: Int
  ne: Int
  in: [Int!]
  nin: [Int!]
  exists: Boolean
  gte: Int
  gt: Int
  lte: Int
  lt: Int
}

input FloatFilterInput {
  eq: Float
  ne: Float
  in: [Float!]
  nin: [Float!]
  exists: Boolean
  gte: Float
  gt: Float
  lte: Float
  lt: Float
}

input BooleanFilterInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean!]
  nin: [Boolean!]
  exists: Boolean
}

input IDFilterInput {
  eq: ID
  ne: ID
  in: [ID!]
  nin: [ID!]
  exists: ID
}


scalar DateTime
scalar Decimal
scalar JSON
scalar Password


input DateTimeFilterInput {
  eq: DateTime
  ne: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  exists: Boolean
  gte: DateTime
  gt: DateTime
  lte: DateTime
  lt: DateTime
}

input DecimalFilterInput {
  eq: Decimal
  ne: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  exists: Boolean
  gte: Decimal
  gt: Decimal
  lte: Decimal
  lt: Decimal
}

input JSONFilterInput {
  eq: JSON
  ne: JSON
  in: [JSON!]
  nin: [JSON!]
  exists: Boolean
}

input PasswordFilterInput {
  eq: Password
  ne: Password
  in: [Password!]
  nin: [Password!]
  exists: Boolean
  contains: Password
  startsWith: Password
  endsWith: Password
  mode: StringFilterMode
}


########### Credentials ###########
input CredentialsInsertInput {
  password: Password
  username: String
}
input CredentialsUpdateInput {
  password: Password
  username: String
}
########### Credentials ###########


########### Post ###########
input PostInsertInput {
  authorId: ID!
  body: String
  clicks: Int
  createdAt: DateTime!
  id: ID!
  metadata: PostMetadata
  title: String!
  views: Int!
}
input PostUpdateInput {
  authorId: ID
  body: String
  clicks: Int
  createdAt: DateTime
  id: ID
  metadata: PostMetadataUpdateInput
  title: String
  views: Int
}
input PostFilterInput {
  authorId: IDFilterInput
  body: StringFilterInput
  clicks: IntFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  title: StringFilterInput
  views: IntFilterInput
}
input PostRelationsFilterInput {
  author: UserFindInput
  tags: TagFindInput
}
input PostSortInput {
  authorId: SortDirection
  body: SortDirection
  clicks: SortDirection
  createdAt: SortDirection
  id: SortDirection
  title: SortDirection
  views: SortDirection
}
input PostFindInput {
  filter: PostFilterInput
  sorts: [PostSortInput!]
  skip: Int
  limit: Int
  relations: PostRelationsFilterInput
}
########### Post ###########


########### PostMetadata ###########
input PostMetadataInsertInput {
  region: String!
  typeId: ID!
  visible: Boolean!
}
input PostMetadataUpdateInput {
  region: String
  typeId: ID
  visible: Boolean
}
########### PostMetadata ###########


########### PostType ###########
input PostTypeInsertInput {
  id: ID!
  name: String!
}
input PostTypeUpdateInput {
  id: ID
  name: String
}
input PostTypeFilterInput {
  id: IDFilterInput
  name: StringFilterInput
}
input PostTypeSortInput {
  id: SortDirection
  name: SortDirection
}
input PostTypeFindInput {
  filter: PostTypeFilterInput
  sorts: [PostTypeSortInput!]
  skip: Int
  limit: Int
}
########### PostType ###########


########### Tag ###########
input TagInsertInput {
  id: ID!
  name: String
  postId: ID!
}
input TagUpdateInput {
  id: ID
  name: String
  postId: ID
}
input TagFilterInput {
  id: IDFilterInput
  name: StringFilterInput
  postId: IDFilterInput
}
input TagSortInput {
  id: SortDirection
  name: SortDirection
  postId: SortDirection
}
input TagFindInput {
  filter: TagFilterInput
  sorts: [TagSortInput!]
  skip: Int
  limit: Int
}
########### Tag ###########


########### User ###########
input UserInsertInput {
  averageViewsPerPost: Float
  createdAt: DateTime!
  credentials: Credentials!
  email: String
  firstName: String
  id: ID!
  lastName: String
  totalPostsViews: Int
}
input UserUpdateInput {
  averageViewsPerPost: Float
  createdAt: DateTime
  credentials: CredentialsUpdateInput
  email: String
  firstName: String
  id: ID
  lastName: String
  totalPostsViews: Int
}
input UserFilterInput {
  averageViewsPerPost: FloatFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  firstName: StringFilterInput
  id: IDFilterInput
  lastName: StringFilterInput
  totalPostsViews: IntFilterInput
}
input UserRelationsFilterInput {
  posts: PostFindInput
}
input UserSortInput {
  averageViewsPerPost: SortDirection
  createdAt: SortDirection
  email: SortDirection
  firstName: SortDirection
  id: SortDirection
  lastName: SortDirection
  totalPostsViews: SortDirection
}
input UserFindInput {
  filter: UserFilterInput
  sorts: [UserSortInput!]
  skip: Int
  limit: Int
  relations: UserRelationsFilterInput
}
########### User ###########


type Query {
  posts(filter: PostFilterInput, sorts: [PostSortInput!], relations: PostRelationsFilterInput, skip: Int, limit: Int): [Post!]!
  postTypes(filter: PostTypeFilterInput, sorts: [PostTypeSortInput!], skip: Int, limit: Int): [PostType!]!
  tags(filter: TagFilterInput, sorts: [TagSortInput!], skip: Int, limit: Int): [Tag!]!
  users(filter: UserFilterInput, sorts: [UserSortInput!], relations: UserRelationsFilterInput, skip: Int, limit: Int): [User!]!
}


type Mutation {
  createPost(record: PostInsertInput): Post!
  updatePosts(filter: PostFilterInput, changes: PostUpdateInput): Boolean
  deletePosts(filter: PostFilterInput): Boolean
  createPostType(record: PostTypeInsertInput): PostType!
  updatePostTypes(filter: PostTypeFilterInput, changes: PostTypeUpdateInput): Boolean
  deletePostTypes(filter: PostTypeFilterInput): Boolean
  createTag(record: TagInsertInput): Tag!
  updateTags(filter: TagFilterInput, changes: TagUpdateInput): Boolean
  deleteTags(filter: TagFilterInput): Boolean
  createUser(record: UserInsertInput): User!
  updateUsers(filter: UserFilterInput, changes: UserUpdateInput): Boolean
  deleteUsers(filter: UserFilterInput): Boolean
}