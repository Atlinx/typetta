enum SortDirection {
  ASC
  DESC
}

enum StringFilterMode {
  SENSITIVE
  INSENSITIVE
}

input StringFilterInput {
  eq: String
  ne: String
  in: [String!]
  nin: [String!]
  exists: Boolean
  contains: String
  startsWith: String
  endsWith: String
  mode: StringFilterMode
}

input IntFilterInput {
  eq: Int
  ne: Int
  in: [Int!]
  nin: [Int!]
  exists: Boolean
  gte: Int
  gt: Int
  lte: Int
  lt: Int
}

input FloatFilterInput {
  eq: Float
  ne: Float
  in: [Float!]
  nin: [Float!]
  exists: Boolean
  gte: Float
  gt: Float
  lte: Float
  lt: Float
}

input BooleanFilterInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean!]
  nin: [Boolean!]
  exists: Boolean
}

input IDFilterInput {
  eq: ID
  ne: ID
  in: [ID!]
  nin: [ID!]
  exists: ID
}


input DateTimeFilterInput {
  eq: DateTime
  ne: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  exists: Boolean
  gte: DateTime
  gt: DateTime
  lte: DateTime
  lt: DateTime
}

input DecimalFilterInput {
  eq: Decimal
  ne: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  exists: Boolean
  gte: Decimal
  gt: Decimal
  lte: Decimal
  lt: Decimal
}

input JSONFilterInput {
  eq: JSON
  ne: JSON
  in: [JSON!]
  nin: [JSON!]
  exists: Boolean
}

input PasswordFilterInput {
  eq: Password
  ne: Password
  in: [Password!]
  nin: [Password!]
  exists: Boolean
  contains: Password
  startsWith: Password
  endsWith: Password
  mode: StringFilterMode
}


########### Credentials ###########
input CredentialsInsertInput {
  password: Password
  username: String
}
########### Credentials ###########


########### Post ###########
input PostFilterInput {
  authorId: IDFilterInput
  body: StringFilterInput
  clicks: IntFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  metadata_region: StringFilterInput
  metadata_typeId: IDFilterInput
  metadata_visible: BooleanFilterInput
  title: StringFilterInput
  views: IntFilterInput
  and: [PostFilterInput!]
  or: [PostFilterInput!]
  nor: [PostFilterInput!]
}
input PostRelationsFilterInput {
  author: UserFindInput
  tags: TagFindInput
}
input PostInsertInput {
  authorId: ID!
  body: String
  clicks: Int
  createdAt: DateTime!
  id: ID!
  metadata: PostMetadata
  title: String!
  views: Int!
}
input PostUpdateInput {
  authorId: ID
  body: String
  clicks: Int
  createdAt: DateTime
  id: ID
  metadata_region: String
  metadata_typeId: ID
  metadata_visible: Boolean
  title: String
  views: Int
}
input PostSortInput {
  authorId: SortDirection
  body: SortDirection
  clicks: SortDirection
  createdAt: SortDirection
  id: SortDirection
  metadata_region: SortDirection
  metadata_typeId: SortDirection
  metadata_visible: SortDirection
  title: SortDirection
  views: SortDirection
}
input PostFindInput {
  filter: PostFilterInput
  sorts: [PostSortInput!]
  skip: Int
  limit: Int
  relations: PostRelationsFilterInput
}
########### Post ###########


########### PostMetadata ###########
input PostMetadataInsertInput {
  region: String!
  typeId: ID!
  visible: Boolean!
}
########### PostMetadata ###########


########### PostType ###########
input PostTypeFilterInput {
  id: IDFilterInput
  name: StringFilterInput
  and: [PostTypeFilterInput!]
  or: [PostTypeFilterInput!]
  nor: [PostTypeFilterInput!]
}
input PostTypeInsertInput {
  id: ID!
  name: String!
}
input PostTypeUpdateInput {
  id: ID
  name: String
}
input PostTypeSortInput {
  id: SortDirection
  name: SortDirection
}
input PostTypeFindInput {
  filter: PostTypeFilterInput
  sorts: [PostTypeSortInput!]
  skip: Int
  limit: Int
}
########### PostType ###########


########### Tag ###########
input TagFilterInput {
  id: IDFilterInput
  name: StringFilterInput
  postId: IDFilterInput
  and: [TagFilterInput!]
  or: [TagFilterInput!]
  nor: [TagFilterInput!]
}
input TagInsertInput {
  id: ID!
  name: String
  postId: ID!
}
input TagUpdateInput {
  id: ID
  name: String
  postId: ID
}
input TagSortInput {
  id: SortDirection
  name: SortDirection
  postId: SortDirection
}
input TagFindInput {
  filter: TagFilterInput
  sorts: [TagSortInput!]
  skip: Int
  limit: Int
}
########### Tag ###########


########### User ###########
input UserFilterInput {
  averageViewsPerPost: FloatFilterInput
  createdAt: DateTimeFilterInput
  credentials_password: PasswordFilterInput
  credentials_username: StringFilterInput
  email: StringFilterInput
  firstName: StringFilterInput
  id: IDFilterInput
  lastName: StringFilterInput
  totalPostsViews: IntFilterInput
  values1: IntFilterInput
  values2: IntFilterInput
  values3: IntFilterInput
  values4: IntFilterInput
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  nor: [UserFilterInput!]
}
input UserRelationsFilterInput {
  posts: PostFindInput
}
input UserInsertInput {
  averageViewsPerPost: Float
  createdAt: DateTime!
  credentials: Credentials!
  email: String
  firstName: String
  id: ID!
  lastName: String
  totalPostsViews: Int
  values1: [Int]
  values2: [Int!]
  values3: [Int]!
  values4: [Int!]!
}
input UserUpdateInput {
  averageViewsPerPost: Float
  createdAt: DateTime
  credentials_password: Password
  credentials_username: String
  email: String
  firstName: String
  id: ID
  lastName: String
  totalPostsViews: Int
  values1: Int
  values2: Int
  values3: Int
  values4: Int
}
input UserSortInput {
  averageViewsPerPost: SortDirection
  createdAt: SortDirection
  credentials_password: SortDirection
  credentials_username: SortDirection
  email: SortDirection
  firstName: SortDirection
  id: SortDirection
  lastName: SortDirection
  totalPostsViews: SortDirection
  values1: SortDirection
  values2: SortDirection
  values3: SortDirection
  values4: SortDirection
}
input UserFindInput {
  filter: UserFilterInput
  sorts: [UserSortInput!]
  skip: Int
  limit: Int
  relations: UserRelationsFilterInput
}
########### User ###########